{"version":3,"sources":["webpack:///./task-02-zd-01.js","webpack:///./task-02-zd-02.js","webpack:///./task-02-zd-03.js","webpack:///./task-03.js","webpack:///./task-01.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","res","rej","map","user","Object","assign","updatedUsers","table","makeTransaction","_ref","min","max","id","Math","floor","random","rejact","logSuccess","_ref2","logError","_ref3","warn","amount","catch","CountdownTimer","selector","targetDate","this","document","querySelector","timerId","start","refs","targetTime","getTime","daysRef","hoursRef","minsRef","secsRef","pad","value","String","padStart","setInterval","currentTime","Date","now","days","hours","mins","secs","textContent","updateClockface","startBtn","className","stopBtn","colors","switchColors","isActive","intervalId","body","style","backgroundColor","disabled","stop","clearInterval","addEventListener","bind"],"mappings":"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","file":"main.9e3c327b308c34163760.js","sourcesContent":["\n\nconst delay = ms => {\n  const promise = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  })\n  return promise\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n   return new Promise((res, rej) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n\n    return res(updatedUsers);\n  })\n\n\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n// /*\n//  * Должно работать так\n//  */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","\n\n// Задание 3\n\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({id}) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, rejact) => {\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({id, time: delay});\n      } else {\n        rejact({id});\n      }\n    }, delay);\n  })\n\n}\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = ({id}) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n","\n\nclass CountdownTimer {\n  constructor({selector, targetDate}){\n    this.selector = document.querySelector(selector),\n    this.targetDate = targetDate;\n    this.timerId = '';\n    this.start();\n  }\n\n  start(refs) {\n    const targetTime = this.targetDate.getTime();\n    const daysRef = this.selector.querySelector('[data-value=\"days\"]');\n    const hoursRef = this.selector.querySelector('[data-value=\"hours\"]');\n    const minsRef = this.selector.querySelector('[data-value=\"mins\"]');\n    const secsRef = this.selector.querySelector('[data-value=\"secs\"]');\n\n    function updateClockface(time) {\n\n      const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n      const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n      const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n      const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n      daysRef.textContent = days;\n      hoursRef.textContent = hours;\n      minsRef.textContent = mins;\n      secsRef.textContent = secs;\n    }\n\n    function pad(value) {\n      return String(value).padStart(2, '0');\n    }\n\n    this.timerId = setInterval(() => {\n      const currentTime = Date.now();\n      const time = targetTime - currentTime;\n\n      updateClockface(time);\n    }, 1000);\n  }\n}\n\n  new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Sep 17, 2019'),\n  });\n\n","const startBtn = document.querySelector('button[data-action=\"start\"]');\nstartBtn.className = \"button\";\nconst stopBtn = document.querySelector('button[data-action=\"stop\"]');\nstopBtn.className = \"button\";\n\nconst colors = [\n  \"#FFFFFF\",\n  \"#2196F3\",\n  \"#4CAF50\",\n  \"#FF9800\",\n  \"#009688\",\n  \"#795548\"\n];\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst switchColors = {\n  isActive: false,\n  intervalId: '',\n  start() {\n    if(!this.isActive) {\n      this.isActive = true;\n      this.intervalId = setInterval(() => {\n        document.body.style.backgroundColor = colors[randomIntegerFromInterval(0, 6)];\n        startBtn.disabled = true;\n      }, 1000);\n    }\n  },\n  stop() {\n    clearInterval(this.intervalId);\n    startBtn.disabled = false;\n    this.isActive = false;\n    console.log('this.intervalId :', this.intervalId);\n  },\n};\n\nstartBtn.addEventListener('click', switchColors.start.bind(switchColors));\nstopBtn.addEventListener('click', switchColors.stop.bind(switchColors));\n"],"sourceRoot":""}